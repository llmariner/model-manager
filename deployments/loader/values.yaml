# Default values for model-manager-loader.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# +docs:section=Global

# Global settings are used to share the values among LLMariner components.
# model-manager-loader is a dependency of LLMariner, so global values
# are propagated at its installation.
# Please see https://github.com/llmariner/llmariner/blob/main/deployments/llmariner.
global:
  # Specify object store info to manage data.
  # Currently, only object stores with S3-compatible APIs are supported.
  objectStore:
    s3:
      # The region name.
      region: dummy
      # The bucket name to store data.
      bucket: llmariner

      # Optional endpoint URL for the object store.
      # +docs:property
      # endpointUrl: ""

      # Specify whether SSL certificate verification is disabled.
      insecureSkipVerify: false

      # Optional AssumeRole.
      # For more information, see [AssumeRole](https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole.html).
      # +docs:property
      # assumeRole:
      #   roleArn: ""
      #   externalId: ""

  # Optional Secret configration for the object store. If specified,
  # the Secret is loaded as environment variables into the container.
  awsSecret:
    # The secret name.
    # +docs:property
    # name: ""

    # The key name with an access key ID set.
    accessKeyIdKey: accessKeyId
    # The key name with a secret access key set.
    secretAccessKeyKey: secretAccessKey

  # Specify the worker configuration to access the control-plane.
  worker:
    # Configuration of the Secret used for worker authentication when
    # communication with the control plane.
    registrationKeySecret:
      # The secret name. `default-cluster-registration-key` is available
      # when the control-plane and worker-plane are in the same cluster.
      # This Secret is generated by cluster-manager-server as default.
      # For more information, see [Install across Multiple Clusters](https://llmariner.ai/docs/setup/install/multi_cluster_production/).
      name: default-cluster-registration-key
      # The key name with a registration key set.
      key: key

    tls:
      # The flag to enable TLS access to the control-plane.
      enable: false

    # If specified, use this address for accessing the control-plane.
    # This is necessary when installing LLMariner in a multi-cluster mode.
    # For more information, see [Install across Multiple Clusters](https://llmariner.ai/docs/setup/install/multi_cluster_production/).
    controlPlaneAddr: ""

# +docs:section=Loader

# The interval time to load models.
modelLoadInterval: 30s
# Specify whether to load models once at startup time.
runOnce: false

# The following default values work if model-manager-server runs in the same namespace.
modelManagerServerWorkerServiceAddr: model-manager-server-worker-service-grpc:8082

componentStatusSender:
  # The flag to enable sending component status to the cluster-manager-server.
  enable : true
  # The name of the component.
  name: model-manager-loader
  # initialDelay is the time to wait before starting the sender.
  initialDelay: 1m
  # The interval time to send the component status.
  interval: 15m
  # The address of the cluster-manager-server to call worker services.
  clusterManagerServerWorkerServiceAddr: cluster-manager-server-worker-service-grpc:8082

# The list of base models to load into LLMariner.
# For more information, see [Supported Open Models](https://llmariner.ai/docs/features/models/).
#
# For example:
# baseModels:
# - google/gemma-2b-it-q4_0
# - meta-llama/Meta-Llama-3.1-8B-Instruct-q4_0
#
# If you want to load a specific GGUF file in a HuggingFace repo, you can specify the filename with the following format:
# <repo name>/<filename>. For example, lmstudio-community/phi-4-GGUF/phi-4-Q3_K_L.gguf will download only phi-4-Q3_K_L.gguf
# under the repo while lmstudio-community/phi-4-GGUF will download all GGUFs in the repo.
#
# +docs:property
# baseModels: []

# The list of fine-tuned or quantized models to load into LLMariner.
# adapterType: One of `lora` or `qlora`.
# quantizationType: One of `gguf` or `awq`.
#
# For example:
# models:
# - model: google/gemma-2b-it-q4_0
#   baseMode: google/gemma-2b-it
#   quantizationType: "gguf"
#
# +docs:property
# models: []

# The configration for downloading models.
downloader:
  # The kind name indicating where the downloader gets models from.
  # +docs:enum=s3,huggingFace,ollama
  kind: s3

  # TODO(kenji): Switch to llmariner-models

  # The configuration used when get models and base-models from s3.
  s3:
    # The s3 endpoint URL. Optional.
    endpointUrl: https://s3.us-west-2.amazonaws.com
    # The region name where the models are stored.
    region: us-west-2
    # Specify whether SSL certificate verification is disabled.
    insecureSkipVerify: false
    # The bucket name where the models are stored.
    bucket: llm-operator-models
    # The path prefix of the model.
    pathPrefix: v1/base-models
    # Set to true if the bucket is public and we don't want to
    # use the credential attached to the pod.
    isPublic: true
    # Optional AssumeRole.
    # For more information, see [AssumeRole](https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole.html).
    # +docs:property
    # assumeRole:
    #   roleArn: ""
    #   externalId: ""

  # The configuration used when get models and base-models from huggingface.
  huggingFace:
    # The path to the cash directory for the huggingface hub.
    cacheDir: "/tmp/huggingface/.cache/huggingface/hub"
    # The path to the hugging face home directory.
    homeDir: "/tmp/huggingface"

  # The configuration used when get models from ollama.
  ollama:
    # The port number for ollama server.
    port: 11434

# Optional Secret configration for the huggingface. If specified, the
# Secret is loaded as a environment variable (`HUGGING_FACE_HUB_TOKEN`)
# into the container.
huggingFaceSecret:
  # The secret name.
  # +docs:property
  # name: ""

  # The key name with an huggingface hub token set.
  apiKeyKey: key

# The configration for storing models in the object storage.
objectStore:
  s3:
    # The prefix name to append to the model path.
    pathPrefix: models
    # The prefix name to append to the base-model path.
    baseModelPathPrefix: base-models

# Override the "model-manager-loader.fullname" value. This value is used
# as part of most of the names of the resources created by this Helm chart.
# +docs:property
# fullnameOverride: "my-model-manager-loader"

# Override the "model-manager-loader.name" value, which is used to annotate
# some of the resources that are created by this Chart (using "app.kubernetes.io/name").
# +docs:property
# nameOverride: "my-model-manager-loader"

# The number of replicas for the model-manager-loader Deployment.
# +docs:type=number
replicaCount: 1

serviceAccount:
  # Specifies whether a service account should be created.
  create: false

  # The name of the service account to use. If not set and create is
  # true, a name is generated using the fullname template.
  # +docs:property
  # name: ""

# The container image of model-manager-loader.
image:
  # The container image name.
  repository: public.ecr.aws/cloudnatix/llmariner/model-manager-loader
  # Kubernetes imagePullPolicy on Deployment.
  pullPolicy: IfNotPresent

# Override the container image tag to deploy by setting this variable.
# If no value is set, the chart's appVersion will be used.
# +docs:property
# version: vX.Y.Z

# Optional additional annotations to add to the Deployment Pods.
# +docs:property
# podAnnotations: {}

# The nodeSelector on Pods tells Kubernetes to schedule Pods on the
# nodes with matching labels.
# For more information, see [Assigning Pods to Nodes](https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/).
# +docs:property
# nodeSelector: {}

# A Kubernetes Affinity, if required.
# For more information, see [Assigning Pods to Nodes](https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node).
#
# For example:
#   affinity:
#     nodeAffinity:
#      requiredDuringSchedulingIgnoredDuringExecution:
#        nodeSelectorTerms:
#        - matchExpressions:
#          - key: foo.bar.com/role
#            operator: In
#            values:
#            - master
#
# +docs:property
# affinity: {}

# A list of Kubernetes Tolerations, if required.
# For more information, see [Taints and Tolerations](https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/).
#
# For example:
#   tolerations:
#   - key: foo.bar.com/role
#     operator: Equal
#     value: master
#     effect: NoSchedule
#
# +docs:property
# tolerations: []

# Resources to provide to the model-manager-loader pod.
# For more information, see [Resource Management for Pods and Containers](https://kubernetes.io/docs/concepts/configuration/manage-resources-Containers/).
#
# For example:
#  requests:
#    cpu: 10m
#    memory: 32Mi
#
# +docs:property
resources:
  requests:
    cpu: "250m"
    memory: "500Mi"
  limits:
    cpu: "250m"

# Security Context for the model-manager-loader pod.
# For more information, see [Configure a Security Context for a Pod or Container](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/).
# +docs:property
podSecurityContext:
  fsGroup: 2000

# Security Context for the model-manager-loader container.
# For more information, see [Configure a Security Context for a Pod or Container](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/).
# +docs:property
securityContext:
  readOnlyRootFilesystem: true
  capabilities:
    drop:
    - ALL
  runAsNonRoot: true
  runAsUser: 1000

# persistent volume settings for the model-manager-loader pod.
persistentVolume:
  # If true, use a PVC. If false, use emptyDir.
  enabled: false

  # The name of the storage class for serving a persistent volume.
  storageClassName: standard

  # If defined, the loader uses the given PVC and does not create a new one.
  # NOTE: PVC must be manually created before the volume is bound.
  # +docs:property
  # existingClaim: ""

  # If defined, the loader used the PVC matched with this selectors.
  # NOTE: PVC must be manually created before the volume is bound.
  # For more information, see [Persistent Volume](https://kubernetes.io/docs/concepts/storage/persistent-volumes/)
  #
  # For example:
  # selector:
  #  matchLabels:
  #    release: "stable"
  #  matchExpressions:
  #    - { key: environment, operator: In, values: [ dev ] }
  #
  # +docs:property
  # selector: {}

  # If defined, the loader Deployment uses the existing PV that has been
  # provisioned in advance.
  # +docs:property
  # volumeName: ""

  # The size of volume.
  size: 100Gi

  # The access mode of the volume.
  # For more information, see [Persistent Volume](https://kubernetes.io/docs/concepts/storage/persistent-volumes/)
  accessModes: ["ReadWriteOnce"]

  # If defined, the engine uses the given binding-mode for the volume.
  # +docs:property
  # volumeBindingMode: ""

# Additional volumes to add to the model-manager-loader pod.
# For more information, see [Volumes](https://kubernetes.io/docs/concepts/storage/volumes/).
# +docs:property
# volumes: []

# Additional volume mounts to add to the model-manager-loader container.
# For more information, see [Volumes](https://kubernetes.io/docs/concepts/storage/volumes/).
# +docs:property
# volumeMounts: []

# This field can be used as a condition when using it as a dependency.
# This definition is only here as a placeholder such that it is
# included in the json schema.
# +docs:hidden
# +docs:property
# enable: true
