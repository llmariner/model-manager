syntax = "proto3";

package llmariner.models.server.v1;

import "google/api/annotations.proto";

option go_package = "github.com/llmariner/model-manager/api/v1";

// The API specification fllows OpenAPI API specification (https://platform.openai.com/docs/api-reference/models).

enum ModelFormat {
  MODEL_FORMAT_UNSPECIFIED = 0;
  MODEL_FORMAT_GGUF = 1;
  MODEL_FORMAT_HUGGING_FACE = 2;
  // Model format for Nvidia Triton Inference Server. This model files include the tokenizer configuration
  // of the original model, compiled model files for TensorRT-LLM backend, and configuration files for
  // Triton Inference Server.
  MODEL_FORMAT_NVIDIA_TRITON = 3;
  MODEL_FORMAT_OLLAMA = 4;
}

// ModelFormats is a list of model formats. Used to store marshalled data into a store.
message ModelFormats {
  repeated ModelFormat formats = 1;
}

enum ModelLoadingStatus {
  MODEL_LOADING_STATUS_UNSPECIFIED = 0;
  // Intial status when the model creation is requested.
  MODEL_LOADING_STATUS_REQUESTED = 1;
  // Loading status when the model is being loaded.
  MODEL_LOADING_STATUS_LOADING = 2;
  // Succeeded status when the model loading is succeeded.
  MODEL_LOADING_STATUS_SUCCEEDED = 3;
  // Failed status when the model loading is failed.
  MODEL_LOADING_STATUS_FAILED = 4;
}

enum SourceRepository {
  SOURCE_REPOSITORY_UNSPECIFIED = 0;
  SOURCE_REPOSITORY_OBJECT_STORE = 1;
  SOURCE_REPOSITORY_HUGGING_FACE = 2;
  SOURCE_REPOSITORY_OLLAMA = 3;
  SOURCE_REPOSITORY_FINE_TUNING = 4;
}

message Model {
  string id = 1;
  int64 created = 2;
  string object = 3;
  string owned_by = 4;

  // loading_status is set when the model is being loaded.
  // This is not in the Open AI API specification.
  ModelLoadingStatus loading_status = 5;
  // source_repository is the source repository of the model. Set for base models created from the CreateModel API request.
  // This is not in the Open AI API specification.
  SourceRepository source_repository = 6;

  // loading_failure_reason is set when the model loading is failed to show the failure reason.
  // This is not in the Open AI API specification.
  string loading_failure_reason = 7;

  // formats is the supported formats of the model.
  // This is not in the Open AI API specification.
  repeated ModelFormat formats = 8;

  // This is not in the Open AI API specification.
  bool is_base_model = 9;

  // base_model_id is the ID of the base model. Only set if the model is a fine-tuned model.
  // This is not in the Open AI API specification.
  string base_model_id = 10;
}

message CreateModelRequest {
  string id = 1;
  SourceRepository source_repository = 2;

  // is_fine_tuned_model is a flag to indicate if the model is a fine-tuned model.
  bool is_fine_tuned_model = 3;
  // base_model_id is the ID of the base model. Only set if the model is a fine-tuned model.
  string base_model_id = 4;
  // suffix is the suffix of the model. Only set if the model is a fine-tuned model.
  string suffix = 5;
  string model_file_location = 6;
}

message ListModelsRequest {
  // include_loading_models is a flag to include loading models in the response.
  //
  // This is not in the Open AI API specification.
  bool include_loading_models = 1;

  // after is the identifier for the last model from the previous pagination request.
  // This is not in the Open AI API specification.
  string after = 2;
  // limit is the number of non-base models to retrieve. Defaults to 100.
  // This is not in the Open AI API specification.
  int32 limit = 3;
}

message ListModelsResponse {
  string object = 1;
  repeated Model data = 2;

  // This is not in the Open AI API specification.
  bool has_more = 3;

  // total_items is the total number of non-base models. This is not defined in the
  // OpenAI API spec, but we include here for better UX in the frontend.
  int32 total_items = 4;
}

message GetModelRequest {
  string id = 1;

  // include_loading_model is a flag to include an loading model in the response.
  //
  // This is not in the Open AI API specification.
  bool include_loading_model = 2;
}

message DeleteModelRequest {
  string id = 1;
}

message DeleteModelResponse {
  string id = 1;
  string object = 2;
  bool deleted = 3;
}

service ModelsService {

  rpc ListModels(ListModelsRequest) returns (ListModelsResponse) {
    option (google.api.http) = {
      get: "/v1/models"
    };
  }

  rpc GetModel(GetModelRequest) returns (Model) {
    option (google.api.http) = {
      // Note: when '=**' is set, 'id' matchs the whole path including '/'.
      // This is required when the model ID might contain '/' characters.
      // (This happens only for a model that is being loaded. Once it is loaded,
      // the converted ID name does not containe '/').
      get: "/v1/models/{id==**}"
    };
  }

  rpc DeleteModel(DeleteModelRequest) returns (DeleteModelResponse) {
    option (google.api.http) = {
      // Note: when '=**' is set, 'id' matchs the whole path including '/'.
      // This is required when the model ID might contain '/' characters.
      // (This happens only for a model that is being loaded. Once it is loaded,
      // the converted ID name does not containe '/').
      delete: "/v1/models/{id=**}"
    };
  }

  // The following API endpoints are not part of the OpenAPI API specification.

  // CreateModel creates a new model. The model becomes available once
  // its model file is loaded to an object store.
  rpc CreateModel(CreateModelRequest) returns (Model) {
    option (google.api.http) = {
      post: "/v1/models"
      body: "*"
    };
  }

}

message StorageConfig {
  string path_prefix = 1;
}

message CreateStorageConfigRequest {
  string path_prefix = 1;
}

message GetStorageConfigRequest {
}

enum AdapterType {
  ADAPTER_TYPE_UNSPECIFIED = 0;
  ADAPTER_TYPE_LORA = 1;
  ADAPTER_TYPE_QLORA = 2;
}

enum QuantizationType {
  QUANTIZATION_TYPE_UNSPECIFIED = 0;
  QUANTIZATION_TYPE_GGUF = 1;
  QUANTIZATION_TYPE_AWQ = 2;
}

message RegisterModelRequest {
  // id is the model name.
  string id = 7;
  string base_model = 1;
  string suffix = 2;
  string organization_id = 3;
  string project_id = 4;
  AdapterType adapter = 5;
  QuantizationType quantization = 6;
  string path = 8;

  // Next ID: 9;
}

message RegisterModelResponse {
  string id = 1;
  // path is the path where the model is stored.
  string path = 2;
}

message PublishModelRequest {
  string id = 1;
}

message PublishModelResponse {
}

// GetModelPathRequest is deprecated, use GetModelAttributesRequest instead.
message GetModelPathRequest {
  string id = 1;
}

// GetModelPathResponse is deprecated, use GetModelAttributesResponse instead.
message GetModelPathResponse {
  string path = 1;
}

message ModelAttributes {
  string path = 1;
  string base_model = 2;
  AdapterType adapter = 3;
  QuantizationType quantization = 4;
}

message GetModelAttributesRequest {
  string id = 1;
}

message CreateBaseModelRequest {
  string id = 1;
  string path = 2;

  // formats is the supported formats of the base model. If not set, the format is considered as GGUF
  // for backward compatibility.
  repeated ModelFormat formats = 4;

  // gguf_model_path is the path of the GGUF model. Set if the model suppors the GGUF formta.
  string gguf_model_path = 3;

  SourceRepository source_repository = 5;

  // Next ID: 6
}

message BaseModel {
  string id = 1;
  int64 created = 2;
  string object = 3;
}

message GetBaseModelPathRequest {
  string id = 1;
}

message GetBaseModelPathResponse {
  repeated ModelFormat formats = 3;

  string path = 1;

  // gguf_model_path is the path of the GGUF model. Set if the model suppors the GGUF formta.
  string gguf_model_path = 2;

  // Next ID: 4
}

message CreateHFModelRepoRequest {
  string name = 1;
}

message HFModelRepo {
  string name = 1;
}

message GetHFModelRepoRequest {
  string name = 1;
}

message AcquireUnloadedBaseModelRequest {
}

message AcquireUnloadedBaseModelResponse {
  // base_model_id is ID of the acquired base model. Empty if there is no unloaded base model.
  string base_model_id = 1;
  SourceRepository source_repository = 2;
}

message UpdateBaseModelLoadingStatusRequest {
  string id = 1;

  message Success {
  }

  message Failure {
    string reason = 1;
  }

  oneof loading_result {
    Success success = 2;
    Failure failure = 3;
  }

}

message UpdateBaseModelLoadingStatusResponse {
}

service ModelsWorkerService {
  // CreateStorageConfig creates a new storage config. Used by model-manager-loader.
  rpc CreateStorageConfig(CreateStorageConfigRequest) returns (StorageConfig) {
  }

  // GetStorageConfig gets a storage config. Used by model-manager-loader.
  rpc GetStorageConfig(GetStorageConfigRequest) returns (StorageConfig) {
  }

  // GetModel gets a model. Used by inference-manager-engine.
  rpc GetModel(GetModelRequest) returns (Model) {
  }

  // RegisterModel registers a new fine-tuned model. Used by job-manager-dispatcher and model-manager-loader.
  // The model is not published until PublishModel is called.
  rpc RegisterModel(RegisterModelRequest) returns (RegisterModelResponse) {
  }

  // PublishModel publishes the fine-tuned model. Used by job-manager-dispatcher and model-manager-loader.
  rpc PublishModel(PublishModelRequest) returns (PublishModelResponse) {
  }

  // GetModelPath returns the path of the model. Used by inference-manager-engine and model-manager-loader.
  rpc GetModelPath(GetModelPathRequest) returns (GetModelPathResponse) {
  }

  // GetModelAttributes returns the attributes of the model. Used by inference-manager-engine.
  rpc GetModelAttributes(GetModelAttributesRequest) returns (ModelAttributes) {
  }

  // CreateBaseModel creates a new base model. Used by model-manager-loader.
  rpc CreateBaseModel(CreateBaseModelRequest) returns (BaseModel) {
  }

  // GetBaseModelPath returns the path of the base model. Used by job-manager-dispatcher,
  // inference-manager-engine, and model-manager-loader.
  rpc GetBaseModelPath(GetBaseModelPathRequest) returns (GetBaseModelPathResponse) {
  }

  // CreateHFModelRepo creates a HuggingFace model repo.
  rpc CreateHFModelRepo(CreateHFModelRepoRequest) returns (HFModelRepo) {
  }

  // GetHFModelRepo returns the HuggingFace model repo that has been downloaded. Used by model-manager-loader.
  rpc GetHFModelRepo(GetHFModelRepoRequest) returns (HFModelRepo) {
  }

  // AcquireUnloadedBaseModel checks if there is any unloaded base model. If exists, update the loading status to LOADED,
  // and return it. Used by model-manager-loader.
  rpc AcquireUnloadedBaseModel(AcquireUnloadedBaseModelRequest) returns (AcquireUnloadedBaseModelResponse) {
  }

  // UpdateBaseModelLoadingStatus updates the loading status. When the loading succeeded, it also
  // updates the base model metadata. Used by model-manager-loader.
  rpc UpdateBaseModelLoadingStatus(UpdateBaseModelLoadingStatusRequest) returns (UpdateBaseModelLoadingStatusResponse) {
  }

}
