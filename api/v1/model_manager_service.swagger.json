{
  "swagger": "2.0",
  "info": {
    "title": "api/v1/model_manager_service.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "ModelsService"
    },
    {
      "name": "ModelsWorkerService"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/basemodels": {
      "get": {
        "operationId": "ModelsService_ListBaseModels",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListBaseModelsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "ModelsService"
        ]
      }
    },
    "/v1/models": {
      "get": {
        "operationId": "ModelsService_ListModels",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListModelsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "includeLoadingModels",
            "description": "include_loading_models is a flag to include loading models in the response.\n\nThis is not in the Open AI API specification.",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "after",
            "description": "after is the identifier for the last non-base model from the previous pagination request.\nThis is not in the Open AI API specification.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "limit is the number of non-base models to retrieve. Defaults to 100.\nThis is not in the Open AI API specification.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "ModelsService"
        ]
      },
      "post": {
        "summary": "CreateModel creates a new base model. The model becomes available once\nits model file is loaded to an object store.",
        "operationId": "ModelsService_CreateModel",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Model"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateModelRequest"
            }
          }
        ],
        "tags": [
          "ModelsService"
        ]
      }
    },
    "/v1/models/{id}": {
      "get": {
        "operationId": "ModelsService_GetModel",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Model"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "includeLoadingModel",
            "description": "include_loading_model is a flag to include an loading model in the response.\n\nThis is not in the Open AI API specification.",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "ModelsService"
        ]
      },
      "delete": {
        "operationId": "ModelsService_DeleteModel",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DeleteModelResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "ModelsService"
        ]
      }
    }
  },
  "definitions": {
    "UpdateBaseModelLoadingStatusRequestFailure": {
      "type": "object",
      "properties": {
        "reason": {
          "type": "string"
        }
      }
    },
    "UpdateBaseModelLoadingStatusRequestSuccess": {
      "type": "object"
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "v1AcquireUnloadedBaseModelResponse": {
      "type": "object",
      "properties": {
        "baseModelId": {
          "type": "string",
          "description": "base_model_id is ID of the acquired base model. Empty if there is no unloaded base model."
        },
        "sourceRepository": {
          "$ref": "#/definitions/v1SourceRepository"
        }
      }
    },
    "v1AdapterType": {
      "type": "string",
      "enum": [
        "ADAPTER_TYPE_UNSPECIFIED",
        "ADAPTER_TYPE_LORA",
        "ADAPTER_TYPE_QLORA"
      ],
      "default": "ADAPTER_TYPE_UNSPECIFIED"
    },
    "v1BaseModel": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "created": {
          "type": "string",
          "format": "int64"
        },
        "object": {
          "type": "string"
        }
      }
    },
    "v1CreateModelRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "sourceRepository": {
          "$ref": "#/definitions/v1SourceRepository"
        }
      }
    },
    "v1DeleteModelResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "object": {
          "type": "string"
        },
        "deleted": {
          "type": "boolean"
        }
      }
    },
    "v1GetBaseModelPathResponse": {
      "type": "object",
      "properties": {
        "formats": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ModelFormat"
          }
        },
        "path": {
          "type": "string"
        },
        "ggufModelPath": {
          "type": "string",
          "description": "gguf_model_path is the path of the GGUF model. Set if the model suppors the GGUF formta."
        }
      }
    },
    "v1GetModelPathResponse": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string"
        }
      },
      "description": "GetModelPathResponse is deprecated, use GetModelAttributesResponse instead."
    },
    "v1HFModelRepo": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "v1ListBaseModelsResponse": {
      "type": "object",
      "properties": {
        "object": {
          "type": "string"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1BaseModel"
          }
        }
      }
    },
    "v1ListModelsResponse": {
      "type": "object",
      "properties": {
        "object": {
          "type": "string"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Model"
          }
        },
        "hasMore": {
          "type": "boolean",
          "description": "This is not in the Open AI API specification."
        },
        "totalItems": {
          "type": "integer",
          "format": "int32",
          "description": "total_items is the total number of non-base models. This is not defined in the\nOpenAI API spec, but we include here for better UX in the frontend."
        }
      }
    },
    "v1Model": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "created": {
          "type": "string",
          "format": "int64"
        },
        "object": {
          "type": "string"
        },
        "ownedBy": {
          "type": "string"
        },
        "loadingStatus": {
          "$ref": "#/definitions/v1ModelLoadingStatus",
          "description": "loading_status is set when the model is being loaded.\nThis is not in the Open AI API specification."
        },
        "sourceRepository": {
          "$ref": "#/definitions/v1SourceRepository",
          "description": "source_repository is the source repository of the model. Set for base models created from the CreateModel API request.\nThis is not in the Open AI API specification."
        },
        "loadingFailureReason": {
          "type": "string",
          "description": "loading_failure_reason is set when the model loading is failed to show the failure reason."
        }
      }
    },
    "v1ModelAttributes": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string"
        },
        "baseModel": {
          "type": "string"
        },
        "adapter": {
          "$ref": "#/definitions/v1AdapterType"
        },
        "quantization": {
          "$ref": "#/definitions/v1QuantizationType"
        }
      }
    },
    "v1ModelFormat": {
      "type": "string",
      "enum": [
        "MODEL_FORMAT_UNSPECIFIED",
        "MODEL_FORMAT_GGUF",
        "MODEL_FORMAT_HUGGING_FACE",
        "MODEL_FORMAT_NVIDIA_TRITON",
        "MODEL_FORMAT_OLLAMA"
      ],
      "default": "MODEL_FORMAT_UNSPECIFIED",
      "description": " - MODEL_FORMAT_NVIDIA_TRITON: Model format for Nvidia Triton Inference Server. This model files include the tokenizer configuration\nof the original model, compiled model files for TensorRT-LLM backend, and configuration files for\nTriton Inference Server."
    },
    "v1ModelLoadingStatus": {
      "type": "string",
      "enum": [
        "MODEL_LOADING_STATUS_UNSPECIFIED",
        "MODEL_LOADING_STATUS_REQUESTED",
        "MODEL_LOADING_STATUS_LOADING",
        "MODEL_LOADING_STATUS_SUCCEEDED",
        "MODEL_LOADING_STATUS_FAILED"
      ],
      "default": "MODEL_LOADING_STATUS_UNSPECIFIED",
      "description": " - MODEL_LOADING_STATUS_REQUESTED: Intial status when the model creation is requested.\n - MODEL_LOADING_STATUS_LOADING: Loading status when the model is being loaded.\n - MODEL_LOADING_STATUS_SUCCEEDED: Succeeded status when the model loading is succeeded.\n - MODEL_LOADING_STATUS_FAILED: Failed status when the model loading is failed."
    },
    "v1PublishModelResponse": {
      "type": "object"
    },
    "v1QuantizationType": {
      "type": "string",
      "enum": [
        "QUANTIZATION_TYPE_UNSPECIFIED",
        "QUANTIZATION_TYPE_GGUF",
        "QUANTIZATION_TYPE_AWQ"
      ],
      "default": "QUANTIZATION_TYPE_UNSPECIFIED"
    },
    "v1RegisterModelResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "path": {
          "type": "string",
          "description": "path is the path where the model is stored."
        }
      }
    },
    "v1SourceRepository": {
      "type": "string",
      "enum": [
        "SOURCE_REPOSITORY_UNSPECIFIED",
        "SOURCE_REPOSITORY_OBJECT_STORE",
        "SOURCE_REPOSITORY_HUGGING_FACE",
        "SOURCE_REPOSITORY_OLLAMA",
        "SOURCE_REPOSITORY_FINE_TUNING"
      ],
      "default": "SOURCE_REPOSITORY_UNSPECIFIED"
    },
    "v1StorageConfig": {
      "type": "object",
      "properties": {
        "pathPrefix": {
          "type": "string"
        }
      }
    },
    "v1UpdateBaseModelLoadingStatusResponse": {
      "type": "object"
    }
  }
}
